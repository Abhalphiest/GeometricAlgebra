   1 0000               # File: 	geomalgebra.asm
   2 0000               #
   3 0000               # Author:	Margaret Dorsey
   4 0000               #
   5 0000               # Description:	Handles all the functions inherent to geometric algebra
   6 0000               #		objects, like the product, and also the building of those
   7 0000               #	 	objects.
   8 0000               #
   9 0000               # Revision:	see gitlog.txt
  10 0000               #
  11 0000               
  12 0000               #
  13 0000               # CONSTANT DEFINITIONS
  14 0000               #
  15 0000               
  16 0000               MEM_BOUND = 	400
  17 0000               
  18 0000               #syscalls
  19 0000               EXIT = 		10
  20 0000               
  21 0000               #
  22 0000               # DATA
  23 0000               #
  24 0000               	.data
  25 0000               	.align	2
  26 0000               
  27 0000               mem_pool:
  28 0000 00000000		.space	400	#we're cheesing it because heap management is hard
          00000000
          00000000
          00000000
          00000000
          00000000
  29 0190               			# and should be added later
  30 0190               pool_ptr:
  31 0190 00000000		.word mem_pool	#pointer to the start of our pool
  32 0194               
  33 0194               #--------------------------
  34 0194               # The sign lookup table uses bit fields to hard code the signs of
  35 0194               # outer products between each basis vector. A 1 in the binary representation
  36 0194               # at the nth position represents a negative product with the nth basis vector
  37 0194               # and a 0 positive.
  38 0194               #--------------------------
  39 0194               
  40 0194               sign_tbl:
  41 0194 00000000		.word	0	#bit field for e0
  42 0198 00000048		.word	72	#e1
  43 019c 00000012		.word	18	#e2
  44 01a0 00000024		.word	36	#e3
  45 01a4 000000B2		.word	178	#e12
  46 01a8 000000F2		.word	242	#e23
  47 01ac 000000C8		.word	200	#e31
  48 01b0 000000DC		.word	220	#e123
  49 01b4               
  50 01b4               prod_arr:
  51 01b4 00000000		.word	0	#for building our product
  52 01b8 00000000		.word	0
  53 01bc 00000000		.word	0
  54 01c0 00000000		.word	0
  55 01c4 00000000		.word	0
  56 01c8 00000000		.word	0
  57 01cc 00000000		.word 	0
  58 01d0 00000000		.word	0
  59 01d4               
  60 01d4               #-------------------------
  61 01d4               # Geometric objects are structured as follows:
  62 01d4               # First 4 bytes store the number of terms (could be 1 byte but word aligned)
  63 01d4               # The rest of the object is pairs of coefficient (4bytes) and bit field for
  64 01d4               # basis vector (4 bytes) until all terms are recorded.
  65 01d4               #
  66 01d4               # The basis vector bit field works as follows. The least significant bit 
  67 01d4               # represents e1, the second bit represents e2, etc. A bivector, trivector, etc
  68 01d4               # can only be a combination of these individual vectors, so for example e123 is
  69 01d4               # 111. e0 is zero.
  70 01d4               #-------------------------
  71 01d4               
  72 01d4               #
  73 01d4               # FUNCTIONS
  74 01d4               #
  75 01d4               
  76 0000               	.text
  77 0000               	.align	2
  78 0000               	.globl	new_ga_object
  79 0000               #
  80 0000               # Name: 	new_ga_object
  81 0000               #
  82 0000               # Description:	takes an array of coefficients and makes a geometric object
  83 0000               #		out of them, taking memory from the mem pool for now
  84 0000               #
  85 0000               # Arguments:	a0: pointer to an array of ints length 8
  86 0000               #
  87 0000               # Returns:	pointer to a geometric object
  88 0000               #
  89 0000               
  90 0000               new_ga_object:
  91 0000               					#no stack for leaf function
  92 0000 34080008		ori	$t0, $zero, 8		#set up for our loop
  93 0004 00004825		or	$t1, $zero, $zero
  94 0008 3C0A0000		la	$t2, pool_ptr
     000c 354A0000
  95 0010 8D4B0000		lw	$t3, 0($t2)		#the ptr to where our next mem is
  96 0014 216B0004		addi	$t3, $t3, 4		#leave space for our length
  97 0018 00006825		or	$t5, $zero, $zero	#counter for length
  98 001c               
  99 001c 3C0E0000		la	$t6, mem_pool
     0020 35CE0000
 100 0024 21CE0190		addi	$t6, $t6, MEM_BOUND
 101 0028               coeff_loop:
 102 0028 0128602A		slt	$t4, $t1, $t0		#bounds checking on array
 103 002c 1180000B		beq	$t4, $zero, coeff_loop_done
 104 0030               
 105 0030 016E602A		slt	$t4, $t3, $t6		#do we still have memory left?
 106 0034 1180000D		beq	$t4, $zero, mem_gone
 107 0038               	
 108 0038 8C8C0000		lw	$t4, 0($a0)		#get coefficient
 109 003c 11800004		beq	$t4, $zero, coeff_stored#skip all this stuff for 0 coeff
 110 0040               	
 111 0040 AD6C0000		sw	$t4, 0($t3)		#our coefficient
 112 0044 AD690004		sw	$t1, 4($t3)		#our basis vec
 113 0048 216B0008		addi	$t3, $t3, 8		#move our memory along
 114 004c 21AD0001		addi	$t5, $t5, 1	
 115 0050               	
 116 0050               coeff_stored:
 117 0050 20840004		addi	$a0, $a0, 4		#next part of array
 118 0054 21290001		addi	$t1, $t1, 1		#increment our loop control
 119 0058 0800000A		j	coeff_loop
 120 005c               coeff_loop_done:
 121 005c 8D420000		lw	$v0, 0($t2)		#get where our struct started again
 122 0060 AC4D0000		sw	$t5, 0($v0)		#put our length at the beginning
 123 0064 AD4B0000		sw	$t3, 0($t2)		#update the persistent ptr
 124 0068               	
 125 0068 03E00008		jr	$ra			#return
 126 006c               mem_gone:
 127 006c 3402000A		ori	$v0, $zero, EXIT	#we'll just go die for now
 128 0070 0000000C		syscall
 129 0074               
 130 0074               
 131 0074               
 132 0074               #
 133 0074               # Name: 	geom_product
 134 0074               #
 135 0074               # Description:	finds the geometric product of two geometric object operands
 136 0074               #
 137 0074               # Arguments:	a0: the address of the first operand
 138 0074               #		a1: the address of the second operand
 139 0074               #
 140 0074               # Returns:	the address of a geometric object representing the product
 141 0074               #
 142 0074               	.globl	geom_product
 143 0074               geom_product:
 144 0074 23BDFFE0		addi	$sp, $sp, -32		#build our stack frame
 145 0078 AFBF0000		sw	$ra, 0($sp)
 146 007c AFB00004		sw	$s0, 4($sp)
 147 0080 AFB10008		sw	$s1, 8($sp)
 148 0084 AFB2000C		sw	$s2, 12($sp)
 149 0088 AFB30010		sw	$s3, 16($sp)
 150 008c AFB40014		sw	$s4, 20($sp)
 151 0090 AFB50018		sw	$s5, 24($sp)
 152 0094 AFB6001C		sw 	$s6, 28($sp)
 153 0098               
 154 0098 00808025		or	$s0, $a0, $zero		#protect our args
 155 009c 00A08825		or	$s1, $a1, $zero
 156 00a0 22120004		addi	$s2, $s0, 4		#s2 outer loop control
 157 00a4 22330004		addi	$s3, $s1, 4		#s3 inner loop control
 158 00a8               	
 159 00a8 8E140000		lw	$s4, 0($s0)		#set up our loop boundaries
 160 00ac 8E350000		lw	$s5, 0($s1)
 161 00b0 0014A080		sll	$s4, 2
 162 00b4 0015A880		sll	$s5, 2
 163 00b8 0214A020		add	$s4, $s0, $s4
 164 00bc 0235A820		add	$s5, $s1, $s5
 165 00c0               
 166 00c0 3C160000		la	$s6, prod_arr
     00c4 36D60000
 167 00c8               
 168 00c8               prod_loop_out:
 169 00c8 0254402A		slt	$t0, $s2, $s4
 170 00cc 1100000F		beq	$t0, $zero, prod_loop_out_done
 171 00d0               
 172 00d0               prod_loop_in:
 173 00d0 0275402A		slt	$t0, $s3, $s5
 174 00d4 1100000B		beq	$t0, $zero, prod_loop_in_done
 175 00d8               	
 176 00d8 02402025		or	$a0, $s2, $zero
 177 00dc 02602825		or	$a1, $s3, $zero	#load our args
 178 00e0               	
 179 00e0 0C000051		jal	get_basis_product
 180 00e4 00604025		or	$t0, $v1, $zero
 181 00e8 00084080		sll	$t0, 2
 182 00ec 02C84020		add	$t0, $s6, $t0	#get pointer to correct element of array
 183 00f0 8D090000		lw	$t1, 0($t0)
 184 00f4 00494820		add	$t1, $v0, $t1
 185 00f8 AD090000		sw	$t1, 0($t0)
 186 00fc               
 187 00fc 22730008		addi	$s3, $s3, 8
 188 0100 08000034		j	prod_loop_in
 189 0104               prod_loop_in_done:
 190 0104               
 191 0104 22520008		addi	$s2, $s2, 8
 192 0108 08000032		j 	prod_loop_out
 193 010c               prod_loop_out_done:
 194 010c 02C02025		or	$a0, $s6, $zero
 195 0110 0C000000		jal	new_ga_object	#puts it in v0 for us
 196 0114               	
 197 0114 02C02025		or	$a0, $s6, $zero
 198 0118 0C00006A		jal	clear_product_arr
 199 011c               geom_product_done:
 200 011c 8FBF0000		lw	$ra, 0($sp)		#restore stack and return
 201 0120 8FB00004		lw	$s0, 4($sp)
 202 0124 8FB10008		lw	$s1, 8($sp)
 203 0128 8FB2000C		lw	$s2, 12($sp)
 204 012c 8FB30010		lw	$s3, 16($sp)
 205 0130 8FB40014		lw	$s4, 20($sp)
 206 0134 8FB50018		lw	$s5, 24($sp)
 207 0138 8FB6001C		lw	$s6, 28($sp)
 208 013c 23BD0020		addi	$sp, $sp, 32
 209 0140 03E00008		jr	$ra		
 210 0144               
 211 0144               #
 212 0144               # Name:		get_basis_product
 213 0144               #
 214 0144               # Description:	given two basis vectors with coefficients,
 215 0144               #		determines their geometric product or outer product, 
 216 0144               #		including sign.
 217 0144               #
 218 0144               # Arguments:	a0: address of pair of coefficient and basis vector for op 1
 219 0144               #		a1: address of pair of coefficient and basis vector op 2
 220 0144               #
 221 0144               # Returns	v0: coefficient of product
 222 0144               #		v1: basis vector of product
 223 0144               #
 224 0144               
 225 0144               get_basis_product:
 226 0144               					#no stack for leaf function
 227 0144 8C880004		lw	$t0, 4($a0)
 228 0148 8CA90004		lw	$t1, 4($a1)		#get basis vectors
 229 014c               	
 230 014c 3C0A0000		la	$t2, sign_tbl
     0150 354A0000
 231 0154 00084080		sll	$t0, 2			#get words
 232 0158 010A4020		add	$t0, $t0, $t2		#correct address for lookup
 233 015c 8D0B0000		lw	$t3, 0($t0)		#get bit field for this basis vector
 234 0160               		
 235 0160 00006025		or	$t4, $zero, $zero
 236 0164 340D0001		ori	$t5, $zero, 1	
 237 0168               shift_loop:
 238 0168 0189702A		slt	$t6, $t4, $t1		#there must be a better way than this
 239 016c 11C00003		beq	$t6, $zero, shift_loop_done
 240 0170 000D6840		sll	$t5, 1
 241 0174 218C0001		addi	$t4, $t4, 1		#increment loop
 242 0178 0800005A		j	shift_loop	
 243 017c               shift_loop_done:	
 244 017c 8C8F0000		lw	$t7, 0($a0)		#coefficients
 245 0180 8CB80000		lw	$t8, 0($a1)		
 246 0184 01AB7024		and	$t6, $t5, $t3		#check our sign
 247 0188 11C00002		beq	$t6, $zero, b_prod	#we're positive then
 248 018c 200CFFFF		addi	$t4, $zero, -1		#for bitwise negation
 249 0190 018F7826		xor	$t7, $t4, $t7		#negate our first coefficient
 250 0194               b_prod:
 251 0194 01F80018		mult	$t7, $t8
 252 0198 00001012		mflo	$v0			#we now have our coefficient
 253 019c 8C880004		lw	$t0, 4($a0)
 254 01a0 01091826		xor	$v1, $t0, $t1		#get our new basis vector
 255 01a4               
 256 01a4 03E00008		jr	$ra			#return to caller
 257 01a8               
 258 01a8               
 259 01a8               
 260 01a8               #
 261 01a8               # Name: clear_product_arr
 262 01a8               #
 263 01a8               # Description: 	sets all the coefficients in the product array back to 0
 264 01a8               # 
 265 01a8               # Arguments: 	a0: ptr to product arr
 266 01a8               #
 267 01a8               # Returns:	Nothing
 268 01a8               #
 269 01a8               
 270 01a8               clear_product_arr:
 271 01a8               					#leaf, no stack
 272 01a8 20880020		addi	$t0, $a0, 32		#8 integer loop
 273 01ac 00804825		or	$t1, $a0, $zero
 274 01b0               	
 275 01b0               clear_loop:
 276 01b0 0128502A		slt	$t2, $t1, $t0
 277 01b4 11400003		beq	$t2, $zero, clear_loop_done
 278 01b8 AD200000		sw	$zero, 0($t1)
 279 01bc 21290004		addi	$t1, $t1, 4
 280 01c0 0800006C		j	clear_loop
 281 01c4               clear_loop_done:
 282 01c4 03E00008		jr	$ra


EXIT                = 0000000A   
MEM_BOUND           = 00000190   
b_prod                00000194 R  text 
clear_loop            000001B0 R  text 
clear_loop_done       000001C4 R  text 
clear_product_arr     000001A8 R  text 
coeff_loop            00000028 R  text 
coeff_loop_done       0000005C R  text 
coeff_stored          00000050 R  text 
geom_product          00000074 RG text 
geom_product_done     0000011C R  text 
get_basis_product     00000144 R  text 
mem_gone              0000006C R  text 
mem_pool              00000000 R  data 
new_ga_object         00000000 RG text 
pool_ptr              00000190 R  data 
prod_arr              000001B4 R  data 
prod_loop_in          000000D0 R  text 
prod_loop_in_done     00000104 R  text 
prod_loop_out         000000C8 R  text 
prod_loop_out_done    0000010C R  text 
shift_loop            00000168 R  text 
shift_loop_done       0000017C R  text 
sign_tbl              00000194 R  data 
