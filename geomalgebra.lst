   1 0000               # File: 	geomalgebra.asm
   2 0000               #
   3 0000               # Author:	Margaret Dorsey
   4 0000               #
   5 0000               # Description:	Handles all the functions inherent to geometric algebra
   6 0000               #		objects, like the product, and also the building of those
   7 0000               #	 	objects.
   8 0000               #
   9 0000               # Revision:	see gitlog.txt
  10 0000               #
  11 0000               
  12 0000               #
  13 0000               # CONSTANT DEFINITIONS
  14 0000               #
  15 0000               
  16 0000               MEM_BOUND = 	400
  17 0000               
  18 0000               #syscalls
  19 0000               EXIT = 		10
  20 0000               
  21 0000               #
  22 0000               # DATA
  23 0000               #
  24 0000               	.data
  25 0000               	.align	2
  26 0000               
  27 0000               mem_pool:
  28 0000 00000000		.space	400	#we're cheesing it because heap management is hard
          00000000
          00000000
          00000000
          00000000
          00000000
  29 0190               			# and should be added later
  30 0190               pool_ptr:
  31 0190 00000000		.word mem_pool	#pointer to the start of our pool
  32 0194               
  33 0194               
  34 0194               
  35 0194               #
  36 0194               # FUNCTIONS
  37 0194               #
  38 0194               
  39 0000               	.text
  40 0000               	.align	2
  41 0000               	.globl	new_ga_object
  42 0000               #
  43 0000               # Name: 	new_ga_object
  44 0000               #
  45 0000               # Description:	takes an array of coefficients and makes a geometric object
  46 0000               #		out of them, taking memory from the mem pool for now
  47 0000               #
  48 0000               # Arguments:	a0: pointer to an array of ints length 8
  49 0000               #
  50 0000               # Returns:	pointer to a geometric object
  51 0000               #
  52 0000               
  53 0000               new_ga_object:
  54 0000               					#no stack for leaf function
  55 0000 34080008		ori	$t0, $zero, 8		#set up for our loop
  56 0004 00004825		or	$t1, $zero, $zero
  57 0008 3C0A0000		la	$t2, pool_ptr
     000c 354A0000
  58 0010 8D4B0000		lw	$t3, 0($t2)		#the ptr to where our next mem is
  59 0014 216B0004		addi	$t3, $t3, 4		#leave space for our length
  60 0018 00006825		or	$t5, $zero, $zero	#counter for length
  61 001c               
  62 001c 3C0E0000		la	$t6, mem_pool
     0020 35CE0000
  63 0024 21CE0190		addi	$t6, $t6, MEM_BOUND
  64 0028               coeff_loop:
  65 0028 0128602A		slt	$t4, $t1, $t0		#bounds checking on array
  66 002c 1180000B		beq	$t4, $zero, coeff_loop_done
  67 0030               
  68 0030 016E602A		slt	$t4, $t3, $t6		#do we still have memory left?
  69 0034 1180000D		beq	$t4, $zero, mem_gone
  70 0038               	
  71 0038 8C8C0000		lw	$t4, 0($a0)		#get coefficient
  72 003c 11800004		beq	$t4, $zero, coeff_stored#skip all this stuff for 0 coeff
  73 0040               	
  74 0040 AD6C0000		sw	$t4, 0($t3)		#our coefficient
  75 0044 AD690004		sw	$t1, 4($t3)		#our basis vec
  76 0048 216B0008		addi	$t3, $t3, 8		#move our memory along
  77 004c 21AD0001		addi	$t5, $t5, 1	
  78 0050               	
  79 0050               coeff_stored:
  80 0050 20840004		addi	$a0, $a0, 4		#next part of array
  81 0054 21290001		addi	$t1, $t1, 1		#increment our loop control
  82 0058 0800000A		j	coeff_loop
  83 005c               coeff_loop_done:
  84 005c 8D420000		lw	$v0, 0($t2)		#get where our struct started again
  85 0060 AC4D0000		sw	$t5, 0($v0)		#put our length at the beginning
  86 0064 AD4B0000		sw	$t3, 0($t2)		#update the persistent ptr
  87 0068               	
  88 0068 03E00008		jr	$ra			#return
  89 006c               mem_gone:
  90 006c 3402000A		ori	$v0, $zero, EXIT	#we'll just go die for now
  91 0070 0000000C		syscall


EXIT             = 0000000A   
MEM_BOUND        = 00000190   
coeff_loop         00000028 R  text 
coeff_loop_done    0000005C R  text 
coeff_stored       00000050 R  text 
mem_gone           0000006C R  text 
mem_pool           00000000 R  data 
new_ga_object      00000000 RG text 
pool_ptr           00000190 R  data 
